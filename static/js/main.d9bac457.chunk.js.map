{"version":3,"sources":["axios/requests.js","axios/axios.js","Components/Banner/Banner.jsx","Components/Navbar/Navbar.jsx","Components/Row/Row.jsx","Screens/HomeScreen.jsx","App.js","features/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Banner","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchMovieData","string","n","className","style","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","title","name","overview","substr","Navbar","show","handleShow","transitionNavbar","window","scrollY","addEventListener","removeEventListener","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","App","counterSlice","createSlice","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9bac457.chunk.js","sourcesContent":["const API_KEY = \"6404397f27505c6c88e6139c65bffd21\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n})\r\n\r\nexport default instance;","import axios from '../../axios/axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport requests from '../../axios/requests'\r\nimport \"./Banner.css\"\r\n\r\nconst Banner = () => {\r\n    const [movie, setMovie] = useState([])\r\n    const base_Url = \"https://image.tmdb.org/t/p/original/\"\r\n\r\n    useEffect(() => {\r\n        async function fetchMovieData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals)\r\n            setMovie(\r\n                request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length -1)\r\n                ]\r\n            )\r\n            return request;\r\n        }\r\n        fetchMovieData()\r\n    }, [])\r\n\r\n    const truncate = (string, n) =>  {\r\n        return string?.length > n ? string.substr(0, n - 1) + '...' : string;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\" style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundPosition:\"center\",\r\n            backgroundImage:`url('${base_Url}${movie?.backdrop_path}')`\r\n        }}>\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\">\r\n                    {movie?.original_name || movie?.title || movie?.name}\r\n                </h1>\r\n\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner__description\">{\r\n                    truncate(`${movie?.overview}`,150)\r\n                }</h1>\r\n            </div>\r\n            <div className=\"banner--fadeBottom\"/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react';\r\nimport \"./Navbar.css\";\r\nconst Navbar = () => {\r\n    const [show, handleShow] = useState(false)\r\n\r\n    const transitionNavbar = () => {\r\n        if (window.scrollY > 100) {\r\n            handleShow(true);\r\n        } else {\r\n            handleShow(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', transitionNavbar)\r\n        return () => window.removeEventListener(\"scroll\", transitionNavbar)\r\n    }, [] )\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <div className=\"nav__contents\">\r\n            <img\r\n                className=\"nav__logo\"\r\n                src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n                alt=\"logo\" />\r\n            <img\r\n                className=\"nav__avatar\"\r\n                src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n                alt=\"SignIn\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useEffect, useState } from 'react'\r\nimport \"./Row.css\";\r\nimport axios from \"../../axios/axios\";\r\n\r\nconst Row = ({ title, fetchUrl, isLargeRow = false }) => {\r\n    const [movies, setMovies] = useState([])\r\n    const base_Url = \"https://image.tmdb.org/t/p/original/\"\r\n    useEffect(() => {\r\n        async function fetchMovieData() {\r\n           const request = await axios.get(fetchUrl\r\n            )\r\n            setMovies(\r\n                request.data.results\r\n            )\r\n            return request\r\n        }\r\n        fetchMovieData()\r\n    }, [fetchUrl])\r\n    return (\r\n        <div className=\"row\">\r\n            <h1>{title}</h1>\r\n            <div className=\"row__posters\">\r\n            {\r\n                    movies.map(movie => \r\n                        ((isLargeRow && movie.poster_path) ||\r\n                            (!isLargeRow && movie.backdrop_path)) && (\r\n                                <img\r\n                                key={movie.id}\r\n                                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                                src={`${base_Url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                                alt={`${movie.name}`} />\r\n                        \r\n                   \r\n                ))\r\n            }\r\n            </div>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React from 'react'\r\nimport requests from '../axios/requests'\r\nimport Banner from '../Components/Banner/Banner'\r\nimport Navbar from '../Components/Navbar/Navbar'\r\nimport Row from '../Components/Row/Row'\r\nimport \"./HomeScreen.css\"\r\n\r\nconst HomeScreen = () => {\r\n    \r\n\r\n    return (\r\n        <div className=\"homeScreen\">\r\n            <Navbar />\r\n\r\n            <Banner />\r\n            \r\n            <Row\r\n                title='NETFLIX ORIGINALS'\r\n                fetchUrl={requests.fetchNetflixOriginals}\r\n                isLargeRow\r\n            />\r\n            <Row\r\n                title=\"Trending Now\"\r\n                fetchUrl={requests.fetchTrending }\r\n            />\r\n                <Row\r\n                title=\"Top Rated\"\r\n                fetchUrl={requests.fetchTopRated}\r\n            />\r\n                <Row\r\n                title=\"Action Movies\"\r\n                fetchUrl={requests.fetchActionMovies}\r\n            />\r\n                <Row\r\n                title=\"Comedy Movies\"\r\n                fetchUrl={requests.fetchComedyMovies}\r\n            />\r\n            <Row\r\n                title=\"Horror Movies\"\r\n                fetchUrl={requests.fetchHorrorMovies}\r\n            />\r\n            <Row\r\n                title=\"Romance Movies\"\r\n                fetchUrl={requests.fetchRomanceMovies}\r\n            />\r\n            <Row\r\n                title=\"Documentaries\"\r\n                fetchUrl={requests.fetchDocumentaries}\r\n            />\r\n            \r\n\r\n            {/* Row */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","import React from 'react';\r\nimport './App.css';\r\nimport HomeScreen from './Screens/HomeScreen';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <HomeScreen/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}