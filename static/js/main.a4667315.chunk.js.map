{"version":3,"sources":["axios/requests.js","firebase/firebase.js","Components/Navbar/Navbar.jsx","axios/axios.js","Components/Banner/Banner.jsx","Components/Row/Row.jsx","Screens/HomeScreen/HomeScreen.jsx","Screens/SignUpScreen/SignUpScreen.jsx","Screens/LoginScreen/LoginScreen.jsx","features/userSlice.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","Navbar","useState","show","handleShow","transitionNavbar","window","scrollY","useEffect","addEventListener","removeEventListener","className","src","alt","onClick","signOut","instance","axios","create","baseURL","Banner","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchMovieData","string","n","style","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","title","name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","SignUpScreen","emailRef","useRef","passwordRef","ref","type","placeholder","e","preventDefault","signInWithEmailAndPassword","current","value","createUserWithEmailAndPassword","then","authUser","console","log","catch","error","alert","message","LoginScreen","signin","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","App","useSelector","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","email","exact","path","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sWAAMA,EAAU,mCAaDC,EAXE,CACbC,cAAc,8BAAD,OAAgCF,EAAhC,mBACbG,sBAAsB,wBAAD,OAA0BH,EAA1B,sBACrBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,oB,gBCGhBU,GAFcC,IAASC,cATN,CACrBC,OAAQ,0CACRC,WAAY,qCACZC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,8CAIcC,YACVR,IAASD,Q,eCqBPU,EA/BA,WAAO,IAAD,EACQC,oBAAS,GADjB,mBACZC,EADY,KACNC,EADM,KAGbC,EAAmB,WACnBC,OAAOC,QAAU,IACnBH,GAAW,GAEXA,GAAW,IAQf,OAJAI,qBAAU,WAER,OADAF,OAAOG,iBAAiB,SAAUJ,GAC3B,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IAED,qBAAKM,UAAS,cAASR,GAAQ,cAA/B,SACE,sBAAKQ,UAAU,gBAAf,UACE,qBACEA,UAAU,YACVC,IAAI,kEACJC,IAAI,SAEN,wBAAQC,QAAS,kBAAMvB,EAAKwB,WAAWJ,UAAU,sBAAjD,4B,iCCpBOK,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,iCCkDEC,G,MAhDA,WAAO,IAAD,EACOlB,mBAAS,IADhB,mBACZmB,EADY,KACLC,EADK,KAInBd,qBAAU,WAAM,4CACd,4BAAAe,EAAA,sEACwBN,EAAMO,IAAI1C,EAASE,uBAD3C,cACQyC,EADR,OAEEH,EACEG,EAAQC,KAAKC,QACXC,KAAKC,MAAMD,KAAKE,SAAWL,EAAQC,KAAKC,QAAQI,OAAS,KAJ/D,kBAOSN,GAPT,4CADc,uBAAC,WAAD,wBAUdO,KACC,IAEH,IAAkBC,EAAQC,EAI1B,OACE,yBACEvB,UAAU,SACVwB,MAAO,CACLC,eAAgB,QAChBC,mBAAoB,SACpBC,gBAAgB,QAAD,OAzBJ,wCAyBI,cAAqBjB,QAArB,IAAqBA,OAArB,EAAqBA,EAAOkB,cAA5B,OALnB,UAQE,sBAAK5B,UAAU,mBAAf,UACE,oBAAIA,UAAU,gBAAd,UACQ,OAALU,QAAK,IAALA,OAAA,EAAAA,EAAOmB,iBAAP,OAAwBnB,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAOoB,SAA/B,OAAwCpB,QAAxC,IAAwCA,OAAxC,EAAwCA,EAAOqB,QAGlD,sBAAK/B,UAAU,kBAAf,UACE,wBAAQA,UAAU,iBAAlB,kBACA,wBAAQA,UAAU,iBAAlB,wBAEF,oBAAIA,UAAU,sBAAd,UAtBYsB,EAuBA,GAAD,cAAIZ,QAAJ,IAAIA,OAAJ,EAAIA,EAAOsB,UAvBFT,EAuBc,KAtBzB,OAAND,QAAM,IAANA,OAAA,EAAAA,EAAQF,QAASG,EAAID,EAAOW,OAAO,EAAGV,EAAI,GAAK,MAAQD,QAyB5D,qBAAKtB,UAAU,4BCPNkC,G,MArCH,SAAC,GAA6C,IAA3CJ,EAA0C,EAA1CA,MAAOK,EAAmC,EAAnCA,SAAmC,IAAzBC,kBAAyB,WACzB7C,mBAAS,IADgB,mBAC9C8C,EAD8C,KACtCC,EADsC,KAcrD,OAXAzC,qBAAU,WAAM,4CACZ,4BAAAe,EAAA,sEACyBN,EAAMO,IAAIsB,GADnC,cACSrB,EADT,OAGIwB,EACIxB,EAAQC,KAAKC,SAJrB,kBAMWF,GANX,4CADY,uBAAC,WAAD,wBASZO,KACD,CAACc,IAEA,sBAAKnC,UAAU,MAAf,UACI,6BAAK8B,IACL,qBAAK9B,UAAU,eAAf,SAEQqC,EAAOE,KAAI,SAAA7B,GAAK,OACV0B,GAAc1B,EAAM8B,cAChBJ,GAAc1B,EAAMkB,gBAClB,qBAEA5B,UAAS,sBAAiBoC,GAAc,oBACxCnC,IAAG,UAvBd,wCAuBc,OAAgBmC,EAAa1B,EAAM8B,YAAc9B,EAAMkB,eAC1D1B,IAAG,UAAKQ,EAAMqB,OAHTrB,EAAM+B,cC8B5BC,G,MAjDI,WAGf,OACI,sBAAK1C,UAAU,aAAf,UACI,cAAC,EAAD,IAEA,cAAC,EAAD,IAEA,cAAC,EAAD,CACI8B,MAAM,oBACNK,SAAUhE,EAASE,sBACnB+D,YAAU,IAEd,cAAC,EAAD,CACIN,MAAM,eACNK,SAAUhE,EAASC,gBAEnB,cAAC,EAAD,CACA0D,MAAM,YACNK,SAAUhE,EAASG,gBAEnB,cAAC,EAAD,CACAwD,MAAM,gBACNK,SAAUhE,EAASI,oBAEnB,cAAC,EAAD,CACAuD,MAAM,gBACNK,SAAUhE,EAASK,oBAEvB,cAAC,EAAD,CACIsD,MAAM,gBACNK,SAAUhE,EAASM,oBAEvB,cAAC,EAAD,CACIqD,MAAM,iBACNK,SAAUhE,EAASO,qBAEvB,cAAC,EAAD,CACIoD,MAAM,gBACNK,SAAUhE,EAASQ,0BCGpBgE,G,MA/CM,WACnB,IAAMC,EAAWC,iBAAO,MAClBC,EAAcD,iBAAO,MAwB3B,OACE,qBAAK7C,UAAU,eAAf,SACE,iCACE,yCACA,uBAAO+C,IAAKH,EAAUI,KAAK,QAAQC,YAAY,UAC/C,uBAAOF,IAAKD,EAAaE,KAAK,WAAWC,YAAY,aACrD,wBAAQD,KAAK,SAAS7C,QAbb,SAAC+C,GACdA,EAAEC,iBACFvE,EAAKwE,2BACHR,EAASS,QAAQC,MACjBR,EAAYO,QAAQC,QASlB,qBAGA,+BACE,sBAAMtD,UAAU,qBAAhB,6BACA,uBAAMG,QAjCG,SAAC+C,GAChBA,EAAEC,iBACFvE,EACG2E,+BACCX,EAASS,QAAQC,MACjBR,EAAYO,QAAQC,OAErBE,MAAK,SAACC,GACLC,QAAQC,IAAIF,MAEbG,OAAM,SAACC,GACNC,MAAMD,EAAME,aAsBe/D,UAAU,qBAAnC,UACG,IADH,2BCSKgE,G,MA9CK,WAAO,IAAD,EACIzE,oBAAS,GADb,mBACjB0E,EADiB,KACTC,EADS,KAExB,OACE,qBAAKlE,UAAU,cAAf,SACE,sBAAKA,UAAU,yBAAf,UACE,qBACEA,UAAU,oBACVC,IAAI,kEACJC,IAAI,KAEN,wBAAQC,QAAS,kBAAM+D,GAAU,IAAOlE,UAAU,sBAAlD,qBAGA,qBAAKA,UAAU,0BAEf,qBAAKA,UAAU,oBAAf,SACGiE,EACC,cAAC,EAAD,IAEA,qCACE,qEACA,qEACA,uGAKA,qBAAKjE,UAAU,qBAAf,SACE,iCACE,uBAAOgD,KAAK,QAAQC,YAAY,kBAChC,wBACE9C,QAAS,kBAAM+D,GAAU,IACzBlE,UAAU,0BAFZ,0C,gBChCLmE,EAAYC,YAAY,CACnCrC,KAAM,OACNsC,aAAc,CACZC,KAAM,MAERC,SAAU,CACRC,MAAO,SAACC,EAAOC,GACbD,EAAMH,KAAOI,EAAOC,SAEtBC,OAAQ,SAACH,GAAD,OAAYA,EAAMH,KAAO,S,EAIJH,EAAUU,QAA5BL,E,EAAAA,MAAOI,E,EAAAA,OAKTE,EAAa,SAACL,GAAD,OAAWA,EAAMH,KAAKA,MAEjCH,IAAf,QCuBeY,EApCH,WACV,IAAMT,EAAOU,YAAYF,GACnBG,EAAWC,cAiBjB,OAhBArF,qBAAU,WAcR,OAboBjB,EAAKuG,oBAAmB,SAACC,GAGzCH,EAFEG,EAGAZ,EAAM,CACJa,IAAKD,EAASC,IACdC,MAAOF,EAASE,QAIXV,QAIZ,CAACK,IAEF,qBAAKjF,UAAU,MAAf,SACE,cAAC,IAAD,UACIsE,EAGA,cAAC,IAAD,UACE,cAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,mBAAlB,SACE,cAAC,EAAD,QAJJ,cAAC,EAAD,SC7BKC,cAAe,CAC5BC,QAAS,CACPpB,KAAMqB,KCOUC,QACW,cAA7BjG,OAAOkG,SAASC,UAEe,UAA7BnG,OAAOkG,SAASC,UAEhBnG,OAAOkG,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,MAAK,SAAAiD,GACjCA,EAAaC,kB","file":"static/js/main.a4667315.chunk.js","sourcesContent":["const API_KEY = \"6404397f27505c6c88e6139c65bffd21\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDHg_B9VqOe-LZ0jE4lbR7gNqAdHUmvnzQ\",\r\n  authDomain: \"netflixclone-623e0.firebaseapp.com\",\r\n  projectId: \"netflixclone-623e0\",\r\n  storageBucket: \"netflixclone-623e0.appspot.com\",\r\n  messagingSenderId: \"259076302961\",\r\n  appId: \"1:259076302961:web:ece88faf254ac8a734d3d0\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\n\r\nexport { auth };\r\nexport default db;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { auth } from \"../../firebase/firebase\";\r\nimport \"./Navbar.css\";\r\nconst Navbar = () => {\r\n  const [show, handleShow] = useState(false);\r\n\r\n  const transitionNavbar = () => {\r\n    if (window.scrollY > 100) {\r\n      handleShow(true);\r\n    } else {\r\n      handleShow(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", transitionNavbar);\r\n    return () => window.removeEventListener(\"scroll\", transitionNavbar);\r\n  }, []);\r\n  return (\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n      <div className=\"nav__contents\">\r\n        <img\r\n          className=\"nav__logo\"\r\n          src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n          alt=\"logo\"\r\n        />\r\n        <button onClick={() => auth.signOut()} className=\"loginScreen__button\">\r\n          Sign Out\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n})\r\n\r\nexport default instance;","import axios from \"../../axios/axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport requests from \"../../axios/requests\";\r\nimport \"./Banner.css\";\r\n\r\nconst Banner = () => {\r\n  const [movie, setMovie] = useState([]);\r\n  const base_Url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n  useEffect(() => {\r\n    async function fetchMovieData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchMovieData();\r\n  }, []);\r\n\r\n  const truncate = (string, n) => {\r\n    return string?.length > n ? string.substr(0, n - 1) + \"...\" : string;\r\n  };\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        backgroundImage: `url('${base_Url}${movie?.backdrop_path}')`,\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\">\r\n          {movie?.original_name || movie?.title || movie?.name}\r\n        </h1>\r\n\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n        </div>\r\n        <h1 className=\"banner__description\">\r\n          {truncate(`${movie?.overview}`, 150)}\r\n        </h1>\r\n      </div>\r\n      <div className=\"banner--fadeBottom\" />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from 'react'\r\nimport \"./Row.css\";\r\nimport axios from \"../../axios/axios\";\r\n\r\nconst Row = ({ title, fetchUrl, isLargeRow = false }) => {\r\n    const [movies, setMovies] = useState([])\r\n    const base_Url = \"https://image.tmdb.org/t/p/original/\"\r\n    useEffect(() => {\r\n        async function fetchMovieData() {\r\n           const request = await axios.get(fetchUrl\r\n            )\r\n            setMovies(\r\n                request.data.results\r\n            )\r\n            return request\r\n        }\r\n        fetchMovieData()\r\n    }, [fetchUrl])\r\n    return (\r\n        <div className=\"row\">\r\n            <h1>{title}</h1>\r\n            <div className=\"row__posters\">\r\n            {\r\n                    movies.map(movie => \r\n                        ((isLargeRow && movie.poster_path) ||\r\n                            (!isLargeRow && movie.backdrop_path)) && (\r\n                                <img\r\n                                key={movie.id}\r\n                                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                                src={`${base_Url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                                alt={`${movie.name}`} />\r\n                        \r\n                   \r\n                ))\r\n            }\r\n            </div>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React from 'react'\r\nimport requests from '../../axios/requests'\r\n\r\nimport Navbar from \"../../Components/Navbar/Navbar\";\r\nimport Banner from \"../../Components/Banner/Banner\"\r\nimport Row from \"../../Components/Row/Row\"\r\nimport \"./HomeScreen.css\"\r\n\r\nconst HomeScreen = () => {\r\n    \r\n\r\n    return (\r\n        <div className=\"homeScreen\">\r\n            <Navbar />\r\n\r\n            <Banner />\r\n            \r\n            <Row\r\n                title='NETFLIX ORIGINALS'\r\n                fetchUrl={requests.fetchNetflixOriginals}\r\n                isLargeRow\r\n            />\r\n            <Row\r\n                title=\"Trending Now\"\r\n                fetchUrl={requests.fetchTrending }\r\n            />\r\n                <Row\r\n                title=\"Top Rated\"\r\n                fetchUrl={requests.fetchTopRated}\r\n            />\r\n                <Row\r\n                title=\"Action Movies\"\r\n                fetchUrl={requests.fetchActionMovies}\r\n            />\r\n                <Row\r\n                title=\"Comedy Movies\"\r\n                fetchUrl={requests.fetchComedyMovies}\r\n            />\r\n            <Row\r\n                title=\"Horror Movies\"\r\n                fetchUrl={requests.fetchHorrorMovies}\r\n            />\r\n            <Row\r\n                title=\"Romance Movies\"\r\n                fetchUrl={requests.fetchRomanceMovies}\r\n            />\r\n            <Row\r\n                title=\"Documentaries\"\r\n                fetchUrl={requests.fetchDocumentaries}\r\n            />\r\n            \r\n\r\n            {/* Row */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","import React, { useRef } from \"react\";\r\nimport { auth } from \"../../firebase/firebase\";\r\nimport \"./SignUpScreen.css\";\r\n\r\nconst SignUpScreen = () => {\r\n  const emailRef = useRef(null);\r\n  const passwordRef = useRef(null);\r\n\r\n  const register = (e) => {\r\n    e.preventDefault();\r\n    auth\r\n      .createUserWithEmailAndPassword(\r\n        emailRef.current.value,\r\n        passwordRef.current.value\r\n      )\r\n      .then((authUser) => {\r\n        console.log(authUser);\r\n      })\r\n      .catch((error) => {\r\n        alert(error.message);\r\n      });\r\n  };\r\n\r\n  const signIn = (e) => {\r\n    e.preventDefault();\r\n    auth.signInWithEmailAndPassword(\r\n      emailRef.current.value,\r\n      passwordRef.current.value\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"signUpScreen\">\r\n      <form>\r\n        <h1>Sign In</h1>\r\n        <input ref={emailRef} type=\"email\" placeholder=\"Email\" />\r\n        <input ref={passwordRef} type=\"password\" placeholder=\"Password\" />\r\n        <button type=\"submit\" onClick={signIn}>\r\n          Sign In\r\n        </button>\r\n        <h4>\r\n          <span className=\"signUpScreen__gray\">New to Netflix?</span>\r\n          <span onClick={register} className=\"signUpScreen__link\">\r\n            {\" \"}\r\n            Sign Up now\r\n          </span>\r\n        </h4>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUpScreen;\r\n","import React, { useState } from \"react\";\r\nimport SignUpScreen from \"../SignUpScreen/SignUpScreen\";\r\nimport \"./LoginScreen.css\";\r\n\r\nconst LoginScreen = () => {\r\n  const [signin, setSignIn] = useState(false);\r\n  return (\r\n    <div className=\"loginScreen\">\r\n      <div className=\"loginScreen_background\">\r\n        <img\r\n          className=\"loginScreen__logo\"\r\n          src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n          alt=\"\"\r\n        />\r\n        <button onClick={() => setSignIn(true)} className=\"loginScreen__button\">\r\n          Sign In\r\n        </button>\r\n        <div className=\"loginScreen__gradient\" />\r\n\r\n        <div className=\"loginScreen__body\">\r\n          {signin ? (\r\n            <SignUpScreen />\r\n          ) : (\r\n            <>\r\n              <h1>Unlimited films, TV shows and more.</h1>\r\n              <h2>Watch anywhere. Cancel at any time.</h2>\r\n              <h3>\r\n                Ready to watch? Enter your email to create or restart your\r\n                membership\r\n              </h3>\r\n\r\n              <div className=\"loginScreen__input\">\r\n                <form>\r\n                  <input type=\"email\" placeholder=\"Email Address\" />\r\n                  <button\r\n                    onClick={() => setSignIn(true)}\r\n                    className=\"loginScreen__getStarted\"\r\n                  >\r\n                    GET STARTED\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginScreen;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => (state.user = null),\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport HomeScreen from \"./Screens/HomeScreen/HomeScreen\";\r\nimport LoginScreen from \"./Screens/LoginScreen/LoginScreen\";\r\nimport { auth } from \"./firebase/firebase\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login, logout, selectUser } from \"./features/userSlice\";\r\n\r\nconst App = () => {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\r\n      if (userAuth) {\r\n        // do something\r\n        dispatch(\r\n          login({\r\n            uid: userAuth.uid,\r\n            email: userAuth.email,\r\n          })\r\n        );\r\n      } else {\r\n        dispatch(logout);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  }, [dispatch]);\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!user ? (\r\n          <LoginScreen />\r\n        ) : (\r\n          <Switch>\r\n            <Route exact path=\"/NewNetflixClone\">\r\n              <HomeScreen />\r\n            </Route>\r\n          </Switch>\r\n        )}\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"../features/userSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}