{"version":3,"sources":["axios/requests.js","Screens/SignUpScreen/SignUpScreen.jsx","axios/axios.js","Screens/LoginScreen/LoginScreen.jsx","App.js","features/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["API_KEY","SignUpScreen","axios","create","baseURL","className","type","placeholder","LoginScreen","useState","signin","setSignIn","src","alt","onClick","App","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sWAAMA,EAAU,mC,GAGE,8BAAD,OAAgCA,EAAhC,mBACS,wBAAD,OAA0BA,EAA1B,sBACP,4BAAD,OAA8BA,EAA9B,mBACK,2BAAD,OAA6BA,EAA7B,mBACC,2BAAD,OAA6BA,EAA7B,mBACC,2BAAD,OAA6BA,EAA7B,mBACE,2BAAD,OAA6BA,EAA7B,sBACC,2BAAD,OAA6BA,EAA7B,mB,4CCUPC,G,OClBEC,EAAMC,OAAO,CAC1BC,QAAS,iC,wBDAQ,WACnB,OACE,qBAAKC,UAAU,eAAf,SACE,iCACE,yCACA,uBAAOC,KAAK,QAAQC,YAAY,UAChC,uBAAOD,KAAK,WAAWC,YAAY,aACnC,wBAAQD,KAAK,SAAb,qBACA,+BACE,sBAAMD,UAAU,qBAAhB,6BACA,sBAAMA,UAAU,qBAAhB,oCEuCKG,G,MAhDK,WAAO,IAAD,EACMC,oBAAS,GADf,mBACfC,EADe,KACPC,EADO,KAEtB,OACI,qBAAKN,UAAU,cAAf,SACI,sBAAKA,UAAU,yBAAf,UACI,qBACIA,UAAU,oBACVO,IAAI,kEACJC,IAAI,KACR,wBACIC,QAAS,kBAAMH,GAAU,IACzBN,UAAU,sBAFd,qBAKA,qBAAKA,UAAU,0BAEf,qBAAKA,UAAU,oBAAf,SAEQK,EACI,cAAC,EAAD,IAEA,qCACA,0EACA,qEACA,uGAEA,qBAAKL,UAAU,qBAAf,SACI,iCACI,uBACIC,KAAK,QACLC,YAAY,kBAEhB,wBACIO,QAAS,kBAAMH,GAAU,IACzBN,UAAU,0BAFd,0CCXrBU,EAnBH,WAEV,OACE,qBAAKV,UAAU,MAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,UAEI,cAAC,EAAD,W,QCXCW,EAAeC,YAAY,CACtCC,KAAM,UACNC,aAAc,CACZC,MAAO,GAETC,SAAU,CACRC,UAAW,SAAAC,GAKTA,EAAMH,OAAS,GAEjBI,UAAW,SAAAD,GACTA,EAAMH,OAAS,GAEjBK,kBAAmB,SAACF,EAAOG,GACzBH,EAAMH,OAASM,EAAOC,Y,EAK+BX,EAAaY,QAiBzDZ,G,EAjBAM,U,EAAWE,U,EAAWC,kBAiBtBT,EAAf,SCtCea,cAAe,CAC5BC,QAAS,CACPC,QAASC,K,QCOOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.408a679d.chunk.js","sourcesContent":["const API_KEY = \"6404397f27505c6c88e6139c65bffd21\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React from \"react\";\r\nimport \"./SignUpScreen.css\";\r\n\r\nconst SignUpScreen = () => {\r\n  return (\r\n    <div className=\"signUpScreen\">\r\n      <form>\r\n        <h1>Sign In</h1>\r\n        <input type=\"email\" placeholder=\"Email\" />\r\n        <input type=\"password\" placeholder=\"Password\" />\r\n        <button type=\"submit\">Sign In</button>\r\n        <h4>\r\n          <span className=\"signUpScreen__gray\">New to Netflix?</span>\r\n          <span className=\"signUpScreen__link\"> Sign Up now</span>\r\n        </h4>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUpScreen;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n})\r\n\r\nexport default instance;","import React, { useState } from 'react'\r\nimport SignUpScreen from '../SignUpScreen/SignUpScreen';\r\nimport \"./LoginScreen.css\"\r\n\r\nconst LoginScreen = () => {\r\n    const [signin, setSignIn] = useState(false);\r\n    return (\r\n        <div className=\"loginScreen\">\r\n            <div className=\"loginScreen_background\">\r\n                <img\r\n                    className=\"loginScreen__logo\"\r\n                    src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n                    alt=\"\" />\r\n                <button\r\n                    onClick={() => setSignIn(true)}\r\n                    className=\"loginScreen__button\">\r\n                    Sign In\r\n                </button>\r\n                <div className=\"loginScreen__gradient\" />\r\n\r\n                <div className=\"loginScreen__body\">\r\n                    {\r\n                        signin ? (\r\n                            <SignUpScreen />\r\n                        ) : (\r\n                            <>\r\n                            <h1>Unlimited films, TV programmes and more.</h1>\r\n                            <h2>Watch anywhere. Cancel at any time.</h2>\r\n                            <h3>Ready to watch? Enter your email to create or restart your membership</h3>\r\n    \r\n                            <div className=\"loginScreen__input\">\r\n                                <form>\r\n                                    <input\r\n                                        type=\"email\"\r\n                                        placeholder=\"Email Address\"\r\n                                    />\r\n                                    <button\r\n                                        onClick={() => setSignIn(true)}\r\n                                        className=\"loginScreen__getStarted\">GET STARTED\r\n                                        </button>\r\n                                </form>\r\n                            </div>\r\n                            </>  \r\n                        )\r\n                    }\r\n                   \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginScreen\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport HomeScreen from \"./Screens/HomeScreen/HomeScreen\";\r\nimport LoginScreen from \"./Screens/LoginScreen/LoginScreen\";\r\n\r\nconst App = () => {\r\n  const user = null;\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        <Switch>\r\n          {!user ? (\r\n            <LoginScreen />\r\n          ) : (\r\n            <Route exact path=\"/NewNetflixClone\">\r\n              <HomeScreen />\r\n            </Route>\r\n          )}\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}